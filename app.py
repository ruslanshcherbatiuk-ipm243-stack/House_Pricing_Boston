import streamlit as st
import pandas as pd
import joblib
from keras.models import load_model

# ===== –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥–µ–ª—ñ —Ç–∞ —Å–∫–µ–π–ª–µ—Ä–∞ =====
@st.cache_resource
def load_model_and_resources():
    model = load_model("boston_model.h5", compile=False)
    scaler = joblib.load("boston_scaler.pkl")
    return model, scaler

model, scaler = load_model_and_resources()

# ===== –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö =====
data = pd.read_excel("boston.xlsx")

# ===== –û–ø–∏—Å –æ–∑–Ω–∞–∫ =====
col_info = {
    "CRIM": "–†—ñ–≤–µ–Ω—å –∑–ª–æ—á–∏–Ω–Ω–æ—Å—Ç—ñ –Ω–∞ –¥—É—à—É –Ω–∞—Å–µ–ª–µ–Ω–Ω—è",
    "ZN": "–†–æ–∑–º—ñ—Ä –¥—ñ–ª—è–Ω–∫–∏",
    "INDUS": "–©—ñ–ª—å–Ω—ñ—Å—Ç—å –Ω–µ–∫–æ–º–µ–Ω—Ä—Ü—ñ–Ω–∏—Ö –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤",
    "CHAS": "–ß–∏ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —Ä—ñ—á–∫–∞ Charles —á–µ—Ä–µ–∑ —Ä–∞–π–æ–Ω (1 ‚Äì —Ç–∞–∫, 0 ‚Äì –Ω—ñ)",
    "NOX": "–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü—ñ—è –æ–∫—Å–∏–¥—ñ–≤ –∞–∑–æ—Ç—É (—á–∞—Å—Ç–∏–Ω –Ω–∞ 10 –º–ª–Ω)",
    "RM": "–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫—ñ–º–Ω–∞—Ç —É –±—É–¥–∏–Ω–∫—É",
    "AGE": "–í—ñ–∫ –±—É–¥–∏–Ω–∫—É",
    "DIS": "–í—ñ–¥—Å—Ç–∞–Ω—å –¥–æ –ø‚Äô—è—Ç–∏ –æ—Å–Ω–æ–≤–Ω–∏—Ö –¥—ñ–ª–æ–≤–∏—Ö —Ü–µ–Ω—Ç—Ä—ñ–≤ –ë–æ—Å—Ç–æ–Ω–∞",
    "RAD": "–Ü–Ω–¥–µ–∫—Å –¥–æ—Å—Ç—É–ø—É –¥–æ —Ä–∞–¥—ñ–∞–ª—å–Ω–∏—Ö —à–æ—Å–µ",
    "TAX": "–°—Ç–∞–≤–∫–∞ –ø–æ–¥–∞—Ç–∫—É –Ω–∞ –Ω–µ—Ä—É—Ö–æ–º—ñ—Å—Ç—å",
    "PTRATIO": "–°–ø—ñ–≤–≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—è —É—á–Ω—ñ–≤ –¥–æ –≤—á–∏—Ç–µ–ª—ñ–≤ —É —à–∫–æ–ª–∞—Ö",
    "B": "–†–∞—Å–æ–≤–∏–π –ø–æ–∫–∞–∑–Ω–∏–∫",
    "LSTAT": "% –Ω–∞—Å–µ–ª–µ–Ω–Ω—è –∑ –Ω–∏–∑—å–∫–∏–º —Å–æ—Ü—ñ–∞–ª—å–Ω–∏–º —Å—Ç–∞—Ç—É—Å–æ–º"
}

# ===== –ó–∞–≥–æ–ª–æ–≤–æ–∫ =====
st.title("üè† Boston Housing Price Prediction")
st.write("–í–≤–µ–¥—ñ—Ç—å –∞–±–æ —Å–∫–æ—Ä–∏–≥—É–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏, —â–æ–± —Å–ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞—Ç–∏ **–º–µ–¥—ñ–∞–Ω–Ω—É –≤–∞—Ä—Ç—ñ—Å—Ç—å –∂–∏—Ç–ª–∞** —É —Ç–∏—Å—è—á–∞—Ö –¥–æ–ª–∞—Ä—ñ–≤:")

# ===== –°—Ç–∞—Ç–∏—Å—Ç–∏—á–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ =====
means = data.mean(numeric_only=True)
stds = data.std(numeric_only=True)

# ===== –í–≤–µ–¥–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ =====
user_input = {}

for col, desc in col_info.items():
    if col == "CHAS":
        # –†–∞–¥—ñ–æ–∫–Ω–æ–ø–∫–∞
        chas_option = st.radio(
            f"{desc}",
            options=["–ù—ñ", "–¢–∞–∫"],
            horizontal=True,
            index=int(means.get(col, 0))
        )
        user_input[col] = 1 if "–¢–∞–∫" in chas_option else 0

    else:
        # Number input –¥–ª—è –≤—Å—ñ—Ö —ñ–Ω—à–∏—Ö
        if col in ["RAD", "AGE", "RM"]:
            val = st.number_input(
                f"{desc}",
                min_value=0,
                value=int(means[col]),
                step=1
            )
        else:
            val = st.number_input(
                f"{desc}",
                min_value=0.0,
                value=float(means[col]),
                step=0.1
            )

        user_input[col] = val

        # –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è, —è–∫—â–æ –∑–Ω–∞—á–µ–Ω–Ω—è –Ω–∞–¥—Ç–æ –≤—ñ–¥—Ö–∏–ª—è—î—Ç—å—Å—è –≤—ñ–¥ —Å–µ—Ä–µ–¥–Ω—å–æ–≥–æ
        mean_val = means[col]
        std_val = stds[col]
        if std_val > 0 and abs(val - mean_val) > 3 * std_val:
            st.warning(
                f"‚ö†Ô∏è –ó–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è **{col}** ({desc}) —Å—É—Ç—Ç—î–≤–æ –≤—ñ–¥—Ä—ñ–∑–Ω—è—î—Ç—å—Å—è –≤—ñ–¥ —Å–µ—Ä–µ–¥–Ω—å–æ–≥–æ ({mean_val:.2f}). "
                "–ú–æ–∂–ª–∏–≤–æ, —Ü–µ –Ω–µ—Ä–µ–∞–ª—ñ—Å—Ç–∏—á–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ä–∞–π–æ–Ω—É."
            )

# ===== –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑—É =====
if st.button("üîÆ –ü—Ä–æ–≥–Ω–æ–∑—É–≤–∞—Ç–∏ MEDV"):
    input_df = pd.DataFrame([user_input])

    # –ú–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è
    input_scaled = scaler.transform(input_df)

    # –ü—Ä–æ–≥–Ω–æ–∑
    prediction = model.predict(input_scaled)
    medv = prediction[0][0]

    st.success(f"üí∞ –ü—Ä–æ–≥–Ω–æ–∑–æ–≤–∞–Ω–∞ –º–µ–¥—ñ–∞–Ω–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å –∂–∏—Ç–ª–∞: **${medv * 1000:.2f}**")
    st.info("üí° –ü–æ—Ä–∞–¥–∞: –∑–º—ñ–Ω—ñ—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä–∏, —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏, —è–∫ –≤–æ–Ω–∏ –≤–ø–ª–∏–≤–∞—é—Ç—å –Ω–∞ —Ü—ñ–Ω—É –∂–∏—Ç–ª–∞.")
